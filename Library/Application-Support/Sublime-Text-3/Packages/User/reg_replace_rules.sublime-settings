{
    /*
    name:               (str): Rule name.  Required.

    find:               (str): Regular expression pattern or literal string.
                        Use (?i) for case insensitive. Use (?s) for dotall.
                        See https://docs.python.org/3.4/library/re.html for more info on regex flags.
                        Required unless "scope" is defined.

    replace:            (str - default=r'\0'): Replace pattern.

    literal:            (bool - default=False): Preform a non-regex, literal search and replace.

    literal_ignorecase: (bool - default=False): Ignore case when "literal" is true.

    scope:              (str): Scope to search for and to apply optional regex to.
                        Required unless "find" is defined.

    scope_filter:       ([str] - default=[]): An array of scope qualifiers for the match.
                        Only used when "scope" is not defined.

                        - Any instance of scope qualifies match: scope.name
                        - Entire match of scope qualifies match: !scope.name
                        - Any instance of scope disqualifies match: -scope.name
                        - Entire match of scope disqualifies match: -!scope.name

    greedy:             (bool - default=True): Apply action to all instances (find all).
                        Used when "find" is defined.

    greedy_scope:       (bool - default=True): Find all the scopes specified by "scope."

    format_replace:     (bool - default=False): Use format string style replace templates.
                        Works only for Regex (with and without Backrefs) and Re (with Backrefs).
                        See http://facelessuser.github.io/backrefs/#format-replacements for more info.

    multi_pass:         (bool - default=False): Perform multiple sweeps on the scope region to find
                        and replace all instances of the regex when regex cannot be formatted to find
                        all instances.  Since a replace can change a scope, this can be useful.

    plugin:             (str): Define replace plugin for more advanced replace logic.
                        Only used for regex replaces and replace.

    args:               (dict): Arguments for 'plugin'.
                        Only used for regex replaces and replace.

    ----------------------------------------------------

    ###### Regex with optional scope qualifiers. ######
    - find (required)
    - replace
    - literal
    - literal_ignorecase
    - greedy
    - scope_filter
    - format_replace
    - plugin
    - args

    ###### Scope search with regex applied to scope region. ######
    - scope (required)
    - find
    - replace
    - literal
    - literal_ignorecase
    - greedy
    - greedy_scope
    - format_replace
    - multi_pass
    - plugn
    - args

    */
    // Example replacements
    "format": "3.0",
    "replacements": {
        "encode_ellipsis": {
            "find": "\\.\\.\\.+|…",
            "replace": "\\u2026"
        },
        "encode_half_fraction": {
            "find": " ?½",
            "replace": "\\u00bd"
        },
        "encode_right_single_quote": {
            "find": "'|’",
            "replace": "\\u2019"
        },
        "encode_double_quotation": {
            "find": "“(.*?)”",
            "replace": "\\u201c\\1\\u201d"
        },
        "encode_single_quotation": {
            "find": "‘(.*?)’",
            "replace": "\\u201c\\1\\u201d"
        },
        "find_long_lines": {
            "find": "^ *(\"\\w+\": )?+\".{143,}"
        },
        // remove deprecated type attr
        "html5_remove_deprecated_type_attr": {
            "find": "(?i)(<(style|script)[^>]*)\\stype=(\"|')text/(css|javascript)(\"|')([^>]*>)",
            "replace": "\\1\\6",
            "greedy": true
        },
        "move_punctuation_inside_quotes": {
            "find": "\\\\u201d([,.])",
            "replace": "\\1\\u201d"
        },
        "move_punctuation_outside_quotes": {
            "find": "([!?:;)])\\\\u201d",
            "replace": "\\u201d\\1"
        },
        // find all non ascii chars
        "non_ascii_chars": {
            "find": "[[:^ascii:]]+"
        },
        // remove_json_dangling_commas
        "remove_json_dangling_commas": {
            "find": ",([\\r\\n\\s]*)(\\]|\\})",
            "replace": "\\1\\2",
            "greedy": true,
            "scope_filter": ["-string", "-comment"]
        },
        "remove_extra_spaces": {
            "find": "(^ +\" *\\S.*? ) +",
            "replace": "\\1"
        },
        "remove_trailing_spaces": {
            "find": "(^ +\" *\\S.*?) +</",
            "replace": "\\1</"
        },
    }
}
